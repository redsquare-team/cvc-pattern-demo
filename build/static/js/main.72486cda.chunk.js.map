{"version":3,"sources":["logo.svg","modal/modal.jsx","App.context.jsx","mymodals/postmodal.jsx","mymodals/postimgmodal.jsx","mymodals/postlist.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Context","React","createContext","View","_ref","btnClass","btnText","props","Object","objectWithoutProperties","react_default","a","createElement","Consumer","modal","className","onClick","toggle","reactstrap_es","assign","children","Controller","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isOpen","bind","assertThisInitialized","setState","prevProps","Provider","value","Component","Decorator","Child","prototype","render","contextType","_ref2","modal_Controller","modal_modal","AppContext","AppController","_React$Component","addPost","v","posts","push","inherits","createClass","key","Modal","_class","text","send","onTextChange","app","context","e","target","_this2","modal_View","type","onChange","img","onImgChange","reader","FileReader","onloadend","src","result","alt","readAsDataURL","files","_this3","postlist","map","i","App","logo","style","width","App_context_AppController","postmodal","postimgmodal","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4RCKpCC,EAAUC,IAAMC,gBAGdC,EAAO,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAUC,EAAbF,EAAaE,QAAYC,EAAzBC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,+BACTM,EAAAC,EAAAC,cAACZ,EAAQa,SAAT,KACK,SAAAC,GAAK,OACFJ,EAAAC,EAAAC,cAAA,WACKN,GAAWI,EAAAC,EAAAC,cAAA,UAAQG,UAAWV,EAAUW,QAASF,EAAMG,QAASX,GACjEI,EAAAC,EAAAC,cAACM,EAAA,EAADV,OAAAW,OAAA,GAAWL,EAAWP,GACjBA,EAAMa,cASrBC,cACF,SAAAA,EAAYd,GAAO,IAAAe,EAAA,OAAAd,OAAAe,EAAA,EAAAf,CAAAgB,KAAAH,IACfC,EAAAd,OAAAiB,EAAA,EAAAjB,CAAAgB,KAAAhB,OAAAkB,EAAA,EAAAlB,CAAAa,GAAAM,KAAAH,KAAMjB,KAEDqB,MAAQ,CACTC,OAAQtB,EAAMsB,OACdZ,OAAQV,EAAMU,OAASV,EAAMU,OAASK,EAAKL,OAAOa,KAAZtB,OAAAuB,EAAA,EAAAvB,QAAAuB,EAAA,EAAAvB,CAAAc,MAL3BA,wEAUfE,KAAKQ,SAAS,CACVH,QAASL,KAAKI,MAAMC,oDAITI,GACXA,EAAUJ,SAAWL,KAAKjB,MAAMsB,QAChCL,KAAKQ,SAAS,CAAEH,OAAQL,KAAKjB,MAAMsB,0CAKvC,OAAOnB,EAAAC,EAAAC,cAACZ,EAAQkC,SAAT,CAAkBC,MAAOX,KAAKI,OAAQJ,KAAKjB,MAAMa,iBAvBvCnB,IAAMmC,WA8B/B,SAASC,EAAUC,GAEf,OADIA,EAAMC,UAAUC,SAAQF,EAAMG,YAAczC,GACzC,SAAA0C,GAAA,IAAGb,EAAHa,EAAGb,OAAQZ,EAAXyB,EAAWzB,OAAWV,EAAtBC,OAAAC,EAAA,EAAAD,CAAAkC,EAAA,4BACHhC,EAAAC,EAAAC,cAAC+B,EAAD,CAAYd,OAAQA,EAAQZ,OAAQA,GAChCP,EAAAC,EAAAC,cAAC0B,EAAU/B,KAQvB,IAAAqC,EAAeP,EAAUlC,GC/DZ0C,EAAa5C,IAAMC,gBAEnB4C,EAAb,SAAAC,GACI,SAAAD,EAAYvC,GAAO,IAAAe,EAAA,OAAAd,OAAAe,EAAA,EAAAf,CAAAgB,KAAAsB,IACfxB,EAAAd,OAAAiB,EAAA,EAAAjB,CAAAgB,KAAAhB,OAAAkB,EAAA,EAAAlB,CAAAsC,GAAAnB,KAAAH,KAAMjB,KAEDyC,QAAU,SAACC,GACZ3B,EAAKM,MAAMsB,MAAMC,KAAKF,GAEtB3B,EAAKU,SAAS,CAAEkB,MAAO5B,EAAKM,MAAMsB,SAGtC5B,EAAKM,MAAQ,CACTsB,MAAO,GACPF,QAAS1B,EAAK0B,QAAQlB,KAAbtB,OAAAuB,EAAA,EAAAvB,QAAAuB,EAAA,EAAAvB,CAAAc,MAXEA,EADvB,OAAAd,OAAA4C,EAAA,EAAA5C,CAAAsC,EAAAC,GAAAvC,OAAA6C,EAAA,EAAA7C,CAAAsC,EAAA,EAAAQ,IAAA,SAAAnB,MAAA,WAiBQ,OAAOzB,EAAAC,EAAAC,cAACiC,EAAWX,SAAZ,CAAqBC,MAAOX,KAAKI,OAAQJ,KAAKjB,MAAMa,cAjBnE0B,EAAA,CAAmC7C,IAAMmC,WCI1BmB,IAAA,SAAAR,GAEP,SAAAS,EAAYjD,GAAO,IAAAe,EAAA,OAAAd,OAAAe,EAAA,EAAAf,CAAAgB,KAAAgC,IACflC,EAAAd,OAAAiB,EAAA,EAAAjB,CAAAgB,KAAAhB,OAAAkB,EAAA,EAAAlB,CAAAgD,GAAA7B,KAAAH,KAAMjB,KAEDqB,MAAQ,CACT6B,KAAM,IAGVnC,EAAKoC,KAAOpC,EAAKoC,KAAK5B,KAAVtB,OAAAuB,EAAA,EAAAvB,QAAAuB,EAAA,EAAAvB,CAAAc,KACZA,EAAKqC,aAAerC,EAAKqC,aAAa7B,KAAlBtB,OAAAuB,EAAA,EAAAvB,QAAAuB,EAAA,EAAAvB,CAAAc,KARLA,EAFZ,OAAAd,OAAA4C,EAAA,EAAA5C,CAAAgD,EAAAT,GAAAvC,OAAA6C,EAAA,EAAA7C,CAAAgD,EAAA,EAAAF,IAAA,OAAAnB,MAAA,SAaFyB,GACDA,EAAIZ,QAAQxB,KAAKI,MAAM6B,MACvBjC,KAAKqC,QAAQ5C,WAfV,CAAAqC,IAAA,eAAAnB,MAAA,SAkBM2B,GACTtC,KAAKQ,SAAS,CAAEyB,KAAMK,EAAEC,OAAO5B,UAnB5B,CAAAmB,IAAA,SAAAnB,MAAA,WAsBE,IAAA6B,EAAAxC,KACDV,EAAQU,KAAKqC,QACjB,OACInD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQF,QAASF,EAAMG,QAAvB,cACAP,EAAAC,EAAAC,cAACqD,EAAD,KACIvD,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAaD,OAAQH,EAAMG,QAA3B,sBAGAP,EAAAC,EAAAC,cAACiC,EAAWhC,SAAZ,KACK,SAAA+C,GAAG,OACAlD,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAAA,SAAOsD,KAAK,OAAOC,SAAUH,EAAKL,eAClCjD,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQF,QAAS,kBAAMgD,EAAKN,KAAKE,KAAjC,iBAnCrBJ,EAAA,CACGvD,IAAMmC,YCDTmB,IAAA,SAAAR,GAEP,SAAAS,EAAYjD,GAAO,IAAAe,EAAA,OAAAd,OAAAe,EAAA,EAAAf,CAAAgB,KAAAgC,IACflC,EAAAd,OAAAiB,EAAA,EAAAjB,CAAAgB,KAAAhB,OAAAkB,EAAA,EAAAlB,CAAAgD,GAAA7B,KAAAH,KAAMjB,KAEDqB,MAAQ,CACTwC,IAAK,IAGT9C,EAAKoC,KAAOpC,EAAKoC,KAAK5B,KAAVtB,OAAAuB,EAAA,EAAAvB,QAAAuB,EAAA,EAAAvB,CAAAc,KACZA,EAAK+C,YAAc/C,EAAK+C,YAAYvC,KAAjBtB,OAAAuB,EAAA,EAAAvB,QAAAuB,EAAA,EAAAvB,CAAAc,KARJA,EAFZ,OAAAd,OAAA4C,EAAA,EAAA5C,CAAAgD,EAAAT,GAAAvC,OAAA6C,EAAA,EAAA7C,CAAAgD,EAAA,EAAAF,IAAA,OAAAnB,MAAA,SAaFyB,GAAK,IAAAI,EAAAxC,KACF8C,EAAS,IAAIC,WAEjBD,EAAOE,UAAY,WACfZ,EAAIZ,QAAQtC,EAAAC,EAAAC,cAAA,OAAK6D,IAAKH,EAAOI,OAAQC,IAAI,aACzCX,EAAKH,QAAQ5C,UAGjBqD,EAAOM,cAAcpD,KAAKI,MAAMwC,OArB7B,CAAAd,IAAA,cAAAnB,MAAA,SAwBK2B,GACRtC,KAAKQ,SAAS,CAAEoC,IAAKN,EAAEC,OAAOc,MAAM,OAzBjC,CAAAvB,IAAA,SAAAnB,MAAA,WA4BE,IAAA2C,EAAAtD,KACDV,EAAQU,KAAKqC,QACjB,OACInD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQF,QAASF,EAAMG,QAAvB,gBACAP,EAAAC,EAAAC,cAACqD,EAAD,KACIvD,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAaD,OAAQH,EAAMG,QAA3B,gBAGAP,EAAAC,EAAAC,cAACiC,EAAWhC,SAAZ,KACK,SAAA+C,GAAG,OACAlD,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAAA,SAAOsD,KAAK,OAAOC,SAAUW,EAAKT,cAClC3D,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQF,QAAS,kBAAM8D,EAAKpB,KAAKE,KAAjC,iBAzCrBJ,EAAA,CACGvD,IAAMmC,YCLT2C,EAAA,kBACXrE,EAAAC,EAAAC,cAACiC,EAAWhC,SAAZ,KACK,SAAA+C,GAAG,OAAIA,EAAIV,MAAM8B,IAAI,SAAC/B,EAAGgC,GAAJ,OAAUvE,EAAAC,EAAAC,cAAA,KAAG0C,IAAK2B,GAAIhC,QC0BrCiC,mLAjBX,OACExE,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAChBL,EAAAC,EAAAC,cAAA,OAAK6D,IAAKU,IAAMC,MAAO,CAAEC,MAAO,KAAOV,IAAI,SAC3CjE,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAC0E,EAAD,KACE5E,EAAAC,EAAAC,cAAC2E,EAAD,MACA7E,EAAAC,EAAAC,cAAC4E,EAAD,MACA9E,EAAAC,EAAAC,cAACgC,EAAD,CAActC,QAAQ,OAAOD,SAAS,mBAAkBK,EAAAC,EAAAC,cAAA,UAAQG,UAAU,OAAlB,kDACxDL,EAAAC,EAAAC,cAACmE,EAAD,gBAXM3C,aCDEqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAStD,OAAO9B,EAAAC,EAAAC,cAACmF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.72486cda.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport { Modal } from \"reactstrap\";\r\n\r\n\r\n// CONTEXT\r\nvar Context = React.createContext();\r\n\r\n// VIEW: STATELESS COMPONENT (DUMB)\r\nconst View = ({ btnClass, btnText, ...props }) => (\r\n    <Context.Consumer>\r\n        {modal =>\r\n            <div>\r\n                {btnText && <button className={btnClass} onClick={modal.toggle}>{btnText}</button>}\r\n                <Modal {...modal} {...props}>\r\n                    {props.children}\r\n                </Modal>\r\n            </div>\r\n        }\r\n    </Context.Consumer>\r\n)\r\n\r\n\r\n// CONTROLLER: STATEFUL  COMPONENT (SMART)\r\nclass Controller extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isOpen: props.isOpen,\r\n            toggle: props.toggle ? props.toggle : this.toggle.bind(this)\r\n        }\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.isOpen !== this.props.isOpen) {\r\n            this.setState({ isOpen: this.props.isOpen });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Context.Provider value={this.state}>{this.props.children}</Context.Provider>\r\n    }\r\n}\r\n\r\n\r\n// DECORATOR\r\n// Injection of Controller & Context via Decorator pattern\r\nfunction Decorator(Child) {\r\n    if (Child.prototype.render) Child.contextType = Context;\r\n    return ({ isOpen, toggle, ...props }) => (\r\n        <Controller isOpen={isOpen} toggle={toggle}>\r\n            <Child {...props} />\r\n        </Controller>\r\n    )\r\n}\r\n\r\n\r\n// EXPORT\r\n// All in One default modal\r\nexport default Decorator(View);\r\n\r\n// Exporing all components\r\nexport {\r\n    Context,\r\n    View,\r\n    Controller,\r\n    Decorator\r\n}\r\n","import React from \"react\";\r\n\r\nexport const AppContext = React.createContext();\r\n\r\nexport class AppController extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.addPost = (v) => {\r\n            this.state.posts.push(v);\r\n\r\n            this.setState({ posts: this.state.posts })\r\n        }\r\n\r\n        this.state = {\r\n            posts: [],\r\n            addPost: this.addPost.bind(this)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <AppContext.Provider value={this.state}>{this.props.children}</AppContext.Provider>\r\n    }\r\n}","import React from \"react\";\r\n\r\nimport * as Modal from \"../modal/modal\";\r\n\r\nimport { ModalHeader, ModalBody, Button } from \"reactstrap\";\r\n\r\nimport { AppContext } from \"../App.context\"\r\n\r\nexport default Modal.Decorator(\r\n    class extends React.Component {\r\n        constructor(props) {\r\n            super(props);\r\n\r\n            this.state = {\r\n                text: \"\"\r\n            }\r\n\r\n            this.send = this.send.bind(this);\r\n            this.onTextChange = this.onTextChange.bind(this);\r\n        }\r\n\r\n        send(app) {\r\n            app.addPost(this.state.text);\r\n            this.context.toggle();\r\n        }\r\n\r\n        onTextChange(e) {\r\n            this.setState({ text: e.target.value });\r\n        }\r\n\r\n        render() {\r\n            var modal = this.context;\r\n            return (\r\n                <div>\r\n                    <Button onClick={modal.toggle}>Add a post</Button>\r\n                    <Modal.View>\r\n                        <ModalHeader toggle={modal.toggle}>\r\n                            Add a textual post\r\n                        </ModalHeader>\r\n                        <AppContext.Consumer>\r\n                            {app =>\r\n                                <ModalBody>\r\n                                    <input type=\"text\" onChange={this.onTextChange}></input>\r\n                                    <Button onClick={() => this.send(app)}>SEND</Button>\r\n                                </ModalBody>\r\n                            }\r\n                        </AppContext.Consumer>\r\n                    </Modal.View>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n);","import React from \"react\";\r\n\r\nimport * as Modal from \"../modal/modal\";\r\n\r\nimport { ModalHeader, ModalBody, Button } from \"reactstrap\";\r\n\r\nimport { AppContext } from \"../App.context\"\r\n\r\nexport default Modal.Decorator(\r\n    class extends React.Component {\r\n        constructor(props) {\r\n            super(props);\r\n\r\n            this.state = {\r\n                img: \"\"\r\n            }\r\n\r\n            this.send = this.send.bind(this);\r\n            this.onImgChange = this.onImgChange.bind(this);\r\n        }\r\n\r\n        send(app) {\r\n            let reader = new FileReader();\r\n\r\n            reader.onloadend = () => {\r\n                app.addPost(<img src={reader.result} alt=\"imgpost\"></img>);\r\n                this.context.toggle();\r\n            }\r\n\r\n            reader.readAsDataURL(this.state.img);\r\n        }\r\n\r\n        onImgChange(e) {\r\n            this.setState({ img: e.target.files[0] });\r\n        }\r\n\r\n        render() {\r\n            var modal = this.context;\r\n            return (\r\n                <div>\r\n                    <Button onClick={modal.toggle}>Add an image</Button>\r\n                    <Modal.View>\r\n                        <ModalHeader toggle={modal.toggle}>\r\n                            Add an image\r\n                        </ModalHeader>\r\n                        <AppContext.Consumer>\r\n                            {app =>\r\n                                <ModalBody>\r\n                                    <input type=\"file\" onChange={this.onImgChange}></input>\r\n                                    <Button onClick={() => this.send(app)}>SEND</Button>\r\n                                </ModalBody>\r\n                            }\r\n                        </AppContext.Consumer>\r\n                    </Modal.View>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n);","import React from \"react\";\r\n\r\nimport { AppContext } from \"../App.context\"\r\n\r\nexport default () => (\r\n    <AppContext.Consumer>\r\n        {app => app.posts.map((v, i) => <p key={i}>{v}</p>)}\r\n    </AppContext.Consumer>\r\n)","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport DefaultModal from \"./modal/modal\";\n\nimport { AppController } from \"./App.context\"\nimport PostModal from \"./mymodals/postmodal\";\nimport PostImgModal from \"./mymodals/postimgmodal\";\nimport PostList from \"./mymodals/postlist\"\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} style={{ width: 150 }} alt=\"logo\" />\n          <h1>Reactpress</h1>\n          <AppController>\n            <PostModal />\n            <PostImgModal />\n            <DefaultModal btnText=\"Help\" btnClass=\"btn btn-primary\"><center className=\"p-5\">With this app you can post a text or an image</center></DefaultModal>\n            <PostList />\n          </AppController>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}